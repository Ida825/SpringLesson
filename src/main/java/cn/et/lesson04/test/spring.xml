<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	">
	
	
	<!-- 扫描注解 -->
	<context:component-scan base-package="cn.et.lesson04.test"></context:component-scan>
	
	
	<!-- 读取配置文件 -->
	<context:property-placeholder location="classpath:/cn/et/lesson04/jdbc/jdbc.properties"/>
	
	<!-- 获取数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
   		<property name="url" value="${url}"></property>
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="username" value="${username1}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	
	<!-- 封装一些操作的方法 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	
	</bean>
	
	<!-- 事务管理器，不在使用jdbc的commit和rollback必须使用事务管理器提供 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	
	<!-- 
		propagation="REQUIRED"  方法和方法之间父子关系
			REQUIRED：没有事务创建一个事务，有事务使用当前事务
			REQUIRES_NEW: 不管父方法中是否存在事务都会新建事务
			SUPPORTS:父方法存在事务 使用当前事务 没有事务 使用jdbc的事务 （自动提交事务）
			NOT_SUPPORTED:不管父方法是否存在事务，都不会使用事务（挂起事务）
			MANDATORY: 必须要在事务环境下运行，必须要有事务，否则会抛异常（如下：
				No existing transaction found for transaction marked with propagation 'mandatory'）
			NEVER: 不能有事务存在，否则抛异常（如下：
				Existing transaction found for transaction marked with propagation 'never'	）
		
		isolation="DEFAULT" 隔离级别	：
		"DEFAULT" :使用数据库本身的隔离级别ORACLE（读已提交）MYSQL(可重复读)
		"READ_UNCOMMITTED"  ：Spring实现读未提交（脏读）
		"READ_COMMITTED"  ：Spring实现读已提交（不可重复读+幻读）
		"REPEATABLE_READ"  ：Spring实现可重复读（幻读）
		"SERIALIZABLE"	：Spring实现串行化（已解决）
		
		事务回滚：				
		Spring事务 运行过程中 碰到运行时异常 自动回滚； 非运行时异常不会回滚
		rollback-for="" 指定会自动回滚的非运行时异常
		no-rollback-for="" 指定某些运行时异常抛出时不回滚
		
		只读事务  （除特定的方法外其他的业务逻辑方法 都不应该操作事务）
			read-only="true"设置只读事务
			
		超时事务：
			一般10~30秒，timeout="3"  MySQL默认10秒，Oracle默认永不超时
		
	 -->
	<tx:advice id="myAdvise" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="3"/>
			<tx:method name="save*" propagation="REQUIRES_NEW"/>
			<tx:method name="delete*"/>
			<!-- 除上面的外只读 -->
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 定义切点  aop 配置：拦截哪些方法（切入点表达式）+ 应用上面的事务增强配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.*..*.dao.*.*(..))" id="myPoint"/>
		<aop:advisor advice-ref="myAdvise" pointcut-ref="myPoint"/>
	</aop:config>
</beans>